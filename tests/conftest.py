import sys
import os

sys.path.append(os.getcwd())

from app import create_app, db
from app.utils.init_db import create_admin, create_default_user, create_rule_test, create_user_test
import pytest

@pytest.fixture
def app():
    os.environ.setdefault("FLASKENV", "testing")
    app = create_app()
    app.config.update({
        "TESTING": True,
        "SERVER_NAME": f"{app.config.get('FLASK_URL')}:{app.config.get('FLASK_PORT')}"
    })

    with app.app_context():
        db.drop_all()
        db.create_all()
        create_user_test()
        create_admin()
        create_rule_test()
        create_default_user() # for the rule with no author

    yield app

@pytest.fixture()
def client(app):
    return app.test_client()


@pytest.fixture()
def runner(app):
    return app.test_cli_runner()
    

# @pytest.fixture
# def new_user(app):  
#     with app.app_context():
#         other_user = User(
#             email="existing@example.com",
#             first_name="Existing",
#             last_name="User"
#         )
#         other_user.password = "password"  
#         db.session.add(other_user)
#         db.session.commit()

#         yield other_user



# @pytest.fixture
# def logged_in_client(client, new_user):  
#     client.post("/api/account/register", json={
#         "email": "test@example.com",
#         "password": "password",
#         "first_name": "Test",
#         "last_name": "User"
#     })
    
#     # Connecter l'utilisateur
#     response = client.post("/api/account/login", json={
#         "email": "test@example.com",
#         "password": "password"
#     })

#     yield client  




# @pytest.fixture
# def client(app):
#     return app.test_client()

# @pytest.fixture
# def init_db(app):
#     db.create_all()
#     yield db
#     db.session.remove()
#     db.drop_all()


# @pytest.fixture
# def new_rule(app):
#     with app.app_context():
#         yield {
#             "title": "Sample YARA Rule a",
#             "description": "A description of the rule",
#             "version": "1.0",
#             "format": "yara",
#             "license": "MIT",
#             "source": "Generated by test",
#             "author": "John Doe",
#             "to_string": "rule sample { condition: 2}",
#         }

