##################################################__Test__Rules__########################################################

###############
#   Api key   #
###############

from app.db_class.db import Rule
from  app.rule import  rule_core as RuleModel


API_KEY_USER = "user_api_key"
API_KEY_ADMIN = "admin_api_key"
API_KEY_USER2 = "user2_api_key"

#######################
#   Connection user   #
#######################

def create_user(client) -> None:
    """Create an User test"""
    client.post("/api/account/register",
                content_type='application/json',
                headers={"X-API-KEY": API_KEY_USER},
                json={
                    "email": "test@example.com",
                    "password": "password",
                    "first_name": "Test",
                    "last_name": "User"
                })

def test_login_other(client) -> None:
    """Connect a lambda user"""
    response = client.post("/api/account/login",
                            headers={"X-API-KEY": API_KEY_USER2}, 
                            json={
                                "email": "t@t.t",
                                "password": "t"
                            })
    assert response.status_code == 200
    assert b"Logged in successfully" in response.data

def test_login_admin(client) -> None:
    """Connect admin user"""
    response = client.post("/api/account/login",
                            headers={"X-API-KEY": API_KEY_ADMIN}, 
                            json={
                                "email": "admin@admin.admin",
                                "password": "admin"
                            })
    assert response.status_code == 200
    assert b"Logged in successfully" in response.data

def test_login_success(client)-> None:
    """Connect the user who create a rule test user"""
    create_user(client)
    response = client.post("/api/account/login",
                            headers={"X-API-KEY": API_KEY_USER}, 
                            json={
                                "email": "test@example.com",
                                "password": "password",
                                "remember_me": True
                            })
    assert response.status_code == 200
    assert b"Logged in successfully" in response.data

####################
#  Create a rule   #
####################

def test_create_rule_valid(client):
    test_login_success(client)
    myRule = {
        "title": "Sample YARA Rule a",
        "description": "A description of the rule",
        "version": "1.0",
        "format": "yara",
        "license": "MIT",
        "source": "Generated by test",
        "author": "John Doe",
        "to_string": "rule sample { condition: 2}"
    }
    response = client.post('/api/rule/create_rule', json=myRule, headers={"X-API-KEY": API_KEY_USER})

    assert response.status_code == 200
    assert b"Rule add successfully" in response.data
    return myRule

def test_create_rule_invalid(client):
    test_login_success(client)
    myRule = {
        "title": "Sample YARA Rule a",  
        "description": "A description of the rule",
        "version": "1.0",
        "format": "yara",
        "license": "MIT",
        "source": "Generated by test",
        "author": "John Doe",
        "to_string": "rule sample { "
    }
    response = client.post('/api/rule/create_rule', json=myRule, headers={"X-API-KEY": API_KEY_USER})

    assert response.status_code == 401
    assert b"Rule invalide" in response.data

def test_create_rule_missing_field(client):
    test_login_success(client)
    incomplete_rule = {
        "title": "Missing Description",
        "format": "yara",
        "version": "1.0",
        "license": "MIT",
        "source": "Generated by test",
        "to_string": "rule sample {}",
    }
    response = client.post('/api/rule/create_rule', json=incomplete_rule, headers={"X-API-KEY": API_KEY_USER})
    assert response.status_code == 400
    assert b"Missing fields in request" in response.data

def test_create_rule_already_exists(client):
    test_login_success(client)
    test_create_rule_valid(client)

    myRule = {
        "title": "Sample YARA Rule a",
        "description": "A description of the rule",
        "version": "1.0",
        "format": "yara",
        "license": "MIT",
        "source": "Generated by test",
        "author": "John Doe",
        "to_string": "rule sample { condition: 2}"
    }
    response = client.post('/api/rule/create_rule', json=myRule, headers={"X-API-KEY": API_KEY_USER})
    assert response.status_code == 402
    assert b"Rule already exists" in response.data

#####################
#   Delete a rule   #
#####################

def test_delete_rule_as_owner(client):
    test_login_success(client)
    response = client.post("/api/rule/delete_rule",
                           json={"title": "test"},
                           headers={"X-API-KEY": API_KEY_USER})
    assert response.status_code == 200
    assert response.json["success"] is True
    assert response.json["message"] == "Rule deleted!"


def test_delete_rule_as_admin(client):
    test_login_admin(client)
    response = client.post("/api/rule/delete_rule",
                           json={"title": "test"},
                           headers={"X-API-KEY": API_KEY_ADMIN})
    assert response.status_code == 200
    assert response.json["success"] is True
    assert b"Rule deleted!" in response.data


def test_delete_rule_as_other_user(client):
    test_login_other(client)
    response = client.post("/api/rule/delete_rule",
                           json={"title": "test"},
                           headers={"X-API-KEY": API_KEY_USER2})
    assert response.status_code == 403
    assert b"Access denied" in response.data

###################
#   Vote a rule   #
###################

def test_vote_rule_flow(client):
    test_login_success(client)
    rule_id = 1
    headers = {"X-API-KEY": API_KEY_USER}

    # --- Vote UP ---
    res = client.get(f"/api/rule/vote_rule?id={rule_id}&vote_type=up", headers=headers)
    assert res.status_code == 200
    data = res.get_json()
    assert data["vote_up"] == 1
    assert data["vote_down"] == 0

    # --- Revote same type (remove UP) ---
    res = client.get(f"/api/rule/vote_rule?id={rule_id}&vote_type=up", headers=headers)
    assert res.status_code == 200
    data = res.get_json()
    assert data["vote_up"] == 0
    assert data["vote_down"] == 0

    # --- Vote DOWN ---
    res = client.get(f"/api/rule/vote_rule?id={rule_id}&vote_type=down", headers=headers)
    assert res.status_code == 200
    data = res.get_json()
    assert data["vote_up"] == 0
    assert data["vote_down"] == 1

    # --- Switch back to UP ---
    res = client.get(f"/api/rule/vote_rule?id={rule_id}&vote_type=up", headers=headers)
    assert res.status_code == 200
    data = res.get_json()
    assert data["vote_up"] == 1
    assert data["vote_down"] == 0

###################
#   Edit a rule   #
###################

def test_edit_rule_as_owner(client):
    test_login_success(client)

    updated_data = {
        "format": "yara",
        "source": "updated source",
        "title": "ss",
        "description": "Updated description",
        "license": "ss",
        "version": 2,
        "to_string": "rule oui { condition: 4}"
    }

    response = client.post(f"/api/rule/edit_rule/1",
                           json=updated_data,
                           headers={"X-API-KEY": API_KEY_USER})

    assert response.status_code == 200
    assert b"Rule updated" in response.data

def test_edit_rule_as_admin(client):
    test_login_admin(client)

    updated_data = {
        "format": "yara",
        "source": "updated source",
        "title": "ss",
        "description": "Updated description",
        "license": "ss",
        "version": 2,
        "to_string": "rule oui { condition: 4}"
    }

    response = client.post(f"/api/rule/edit_rule/1",
                           json=updated_data,
                           headers={"X-API-KEY": API_KEY_ADMIN})

    assert response.status_code == 200
    assert b"Rule updated" in response.data


def test_edit_bad_rule(client):
    test_login_admin(client)

    updated_data = {
        "format": "yara",
        "source": "updated source",
        "title": "ss",
        "description": "Updated description",
        "license": "ss",
        "version": 2,
        "to_string": "rule oui { conditi}"
    }

    response = client.post(f"/api/rule/edit_rule/1",
                           json=updated_data,
                           headers={"X-API-KEY":API_KEY_USER})

    assert response.status_code == 401
