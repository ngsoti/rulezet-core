"""empty message

Revision ID: fb94fb8bf99e
Revises: 
Create Date: 2025-10-15 08:48:35.030076
"""

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'fb94fb8bf99e'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    inspector = sa.inspect(bind)
    existing_tables = inspector.get_table_names()

    if not "bundle_vote" in existing_tables:
        op.create_table(
            'bundle_vote',
            sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
            sa.Column('user_id', sa.Integer(), nullable=False),
            sa.Column('bundle_id', sa.Integer(), nullable=False),
            sa.Column('vote_type', sa.String(length=10), nullable=False),
            sa.Column('created_at', sa.DateTime(), nullable=True),
            sa.ForeignKeyConstraint(['bundle_id'], ['bundle.id']),
            sa.ForeignKeyConstraint(['user_id'], ['user.id']),
            sa.PrimaryKeyConstraint('id')
        )

    bundle_columns = [col['name'] for col in inspector.get_columns('bundle')]
    with op.batch_alter_table('bundle', schema=None) as batch_op:
        if "vote_up" not in bundle_columns:
            batch_op.add_column(sa.Column('vote_up', sa.Integer(), nullable=False, server_default=sa.text('0')))
        if "vote_down" not in bundle_columns:
            batch_op.add_column(sa.Column('vote_down', sa.Integer(), nullable=False, server_default=sa.text('0')))
        if "access" not in bundle_columns:
            batch_op.add_column(sa.Column('access', sa.Boolean(), nullable=False, server_default=sa.text('true')))
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    inspector = sa.inspect(bind)
    existing_tables = inspector.get_table_names()

    bundle_columns = [col['name'] for col in inspector.get_columns('bundle')]
    with op.batch_alter_table('bundle', schema=None) as batch_op:
        if "access" in bundle_columns:
            batch_op.drop_column('access')
        if "vote_down" in bundle_columns:
            batch_op.drop_column('vote_down')
        if "vote_up" in bundle_columns:
            batch_op.drop_column('vote_up')

    if not "bundle_vote" in existing_tables:
        op.drop_table('bundle_vote')
    # ### end Alembic commands ###
